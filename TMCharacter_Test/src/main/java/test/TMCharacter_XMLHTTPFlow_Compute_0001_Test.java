// Copyright (c) 2022 Open Technologies for Integration
// Licensed under the MIT license (see LICENSE for details)

package test;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.SpyObjectReference;
import com.ibm.integration.test.v1.TestMessageAssembly;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;

import static com.ibm.integration.test.v1.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TMCharacter_XMLHTTPFlow_Compute_0001_Test {

	/*
	 * TMCharacter_XMLHTTPFlow_Compute_0001_Test
	 * Test generated by IBM App Connect Enterprise Toolkit 12.0.7.0 on Dec 30, 2022 8:47:49 AM
	 */

	@AfterEach
	public void cleanupTest() throws TestException {
		// Ensure any mocks created by a test are cleared after the test runs 
		TestSetup.restoreAllMocks();
	}

	@Test
	public void TMCharacter_XMLHTTPFlow_Compute_TestCase_001() throws TestException {

		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("TMCharacter")
				.messageFlow("XMLHTTPFlow").node("Compute");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Call the message flow node with the (blank) Message Assembly; no input
        // message is needed in this case as the flow creates a fixed output message.
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */
        TestMessageAssembly actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

        // We need to create the string to compare, and do so without having to put actual 
        // Unicode characters in the source file as that might lead to issues with editors
        // that don't preserve Unicode properly.
        char tmCharacter = 0x2122; // TM character
        String stringToCompare = "The following character should be the unicode TM symbol u2122: "+tmCharacter;
        assertEquals(stringToCompare, actualMessageAssembly.messagePath("XMLNSC.html.body.p").getStringValue());
	}

}
